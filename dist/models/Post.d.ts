import * as mongoose from "mongoose";
declare const _default: mongoose.Model<{
    comments: mongoose.Types.DocumentArray<{
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }> & {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }>;
    content?: unknown;
    title?: unknown;
    created_at?: {
        [Symbol.toPrimitive]?: {};
        toString?: {};
        valueOf?: {};
        toLocaleString?: {};
        toJSON?: {};
        toDateString?: {};
        toTimeString?: {};
        toLocaleDateString?: {};
        toLocaleTimeString?: {};
        getTime?: {};
        getFullYear?: {};
        getUTCFullYear?: {};
        getMonth?: {};
        getUTCMonth?: {};
        getDate?: {};
        getUTCDate?: {};
        getDay?: {};
        getUTCDay?: {};
        getHours?: {};
        getUTCHours?: {};
        getMinutes?: {};
        getUTCMinutes?: {};
        getSeconds?: {};
        getUTCSeconds?: {};
        getMilliseconds?: {};
        getUTCMilliseconds?: {};
        getTimezoneOffset?: {};
        setTime?: {};
        setMilliseconds?: {};
        setUTCMilliseconds?: {};
        setSeconds?: {};
        setUTCSeconds?: {};
        setMinutes?: {};
        setUTCMinutes?: {};
        setHours?: {};
        setUTCHours?: {};
        setDate?: {};
        setUTCDate?: {};
        setMonth?: {};
        setUTCMonth?: {};
        setFullYear?: {};
        setUTCFullYear?: {};
        toUTCString?: {};
        toISOString?: {};
    };
    updated_at?: {
        [Symbol.toPrimitive]?: {};
        toString?: {};
        valueOf?: {};
        toLocaleString?: {};
        toJSON?: {};
        toDateString?: {};
        toTimeString?: {};
        toLocaleDateString?: {};
        toLocaleTimeString?: {};
        getTime?: {};
        getFullYear?: {};
        getUTCFullYear?: {};
        getMonth?: {};
        getUTCMonth?: {};
        getDate?: {};
        getUTCDate?: {};
        getDay?: {};
        getUTCDay?: {};
        getHours?: {};
        getUTCHours?: {};
        getMinutes?: {};
        getUTCMinutes?: {};
        getSeconds?: {};
        getUTCSeconds?: {};
        getMilliseconds?: {};
        getUTCMilliseconds?: {};
        getTimezoneOffset?: {};
        setTime?: {};
        setMilliseconds?: {};
        setUTCMilliseconds?: {};
        setSeconds?: {};
        setUTCSeconds?: {};
        setMinutes?: {};
        setUTCMinutes?: {};
        setHours?: {};
        setUTCHours?: {};
        setDate?: {};
        setUTCDate?: {};
        setMonth?: {};
        setUTCMonth?: {};
        setFullYear?: {};
        setUTCFullYear?: {};
        toUTCString?: {};
        toISOString?: {};
    };
    user_id?: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    };
}, {}, {}, {}, mongoose.Document<unknown, {}, {
    comments: mongoose.Types.DocumentArray<{
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }> & {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }>;
    content?: unknown;
    title?: unknown;
    created_at?: {
        [Symbol.toPrimitive]?: {};
        toString?: {};
        valueOf?: {};
        toLocaleString?: {};
        toJSON?: {};
        toDateString?: {};
        toTimeString?: {};
        toLocaleDateString?: {};
        toLocaleTimeString?: {};
        getTime?: {};
        getFullYear?: {};
        getUTCFullYear?: {};
        getMonth?: {};
        getUTCMonth?: {};
        getDate?: {};
        getUTCDate?: {};
        getDay?: {};
        getUTCDay?: {};
        getHours?: {};
        getUTCHours?: {};
        getMinutes?: {};
        getUTCMinutes?: {};
        getSeconds?: {};
        getUTCSeconds?: {};
        getMilliseconds?: {};
        getUTCMilliseconds?: {};
        getTimezoneOffset?: {};
        setTime?: {};
        setMilliseconds?: {};
        setUTCMilliseconds?: {};
        setSeconds?: {};
        setUTCSeconds?: {};
        setMinutes?: {};
        setUTCMinutes?: {};
        setHours?: {};
        setUTCHours?: {};
        setDate?: {};
        setUTCDate?: {};
        setMonth?: {};
        setUTCMonth?: {};
        setFullYear?: {};
        setUTCFullYear?: {};
        toUTCString?: {};
        toISOString?: {};
    };
    updated_at?: {
        [Symbol.toPrimitive]?: {};
        toString?: {};
        valueOf?: {};
        toLocaleString?: {};
        toJSON?: {};
        toDateString?: {};
        toTimeString?: {};
        toLocaleDateString?: {};
        toLocaleTimeString?: {};
        getTime?: {};
        getFullYear?: {};
        getUTCFullYear?: {};
        getMonth?: {};
        getUTCMonth?: {};
        getDate?: {};
        getUTCDate?: {};
        getDay?: {};
        getUTCDay?: {};
        getHours?: {};
        getUTCHours?: {};
        getMinutes?: {};
        getUTCMinutes?: {};
        getSeconds?: {};
        getUTCSeconds?: {};
        getMilliseconds?: {};
        getUTCMilliseconds?: {};
        getTimezoneOffset?: {};
        setTime?: {};
        setMilliseconds?: {};
        setUTCMilliseconds?: {};
        setSeconds?: {};
        setUTCSeconds?: {};
        setMinutes?: {};
        setUTCMinutes?: {};
        setHours?: {};
        setUTCHours?: {};
        setDate?: {};
        setUTCDate?: {};
        setMonth?: {};
        setUTCMonth?: {};
        setFullYear?: {};
        setUTCFullYear?: {};
        toUTCString?: {};
        toISOString?: {};
    };
    user_id?: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    };
}> & {
    comments: mongoose.Types.DocumentArray<{
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }, mongoose.Types.Subdocument<mongoose.Types.ObjectId, any, {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }> & {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    }>;
    content?: unknown;
    title?: unknown;
    created_at?: {
        [Symbol.toPrimitive]?: {};
        toString?: {};
        valueOf?: {};
        toLocaleString?: {};
        toJSON?: {};
        toDateString?: {};
        toTimeString?: {};
        toLocaleDateString?: {};
        toLocaleTimeString?: {};
        getTime?: {};
        getFullYear?: {};
        getUTCFullYear?: {};
        getMonth?: {};
        getUTCMonth?: {};
        getDate?: {};
        getUTCDate?: {};
        getDay?: {};
        getUTCDay?: {};
        getHours?: {};
        getUTCHours?: {};
        getMinutes?: {};
        getUTCMinutes?: {};
        getSeconds?: {};
        getUTCSeconds?: {};
        getMilliseconds?: {};
        getUTCMilliseconds?: {};
        getTimezoneOffset?: {};
        setTime?: {};
        setMilliseconds?: {};
        setUTCMilliseconds?: {};
        setSeconds?: {};
        setUTCSeconds?: {};
        setMinutes?: {};
        setUTCMinutes?: {};
        setHours?: {};
        setUTCHours?: {};
        setDate?: {};
        setUTCDate?: {};
        setMonth?: {};
        setUTCMonth?: {};
        setFullYear?: {};
        setUTCFullYear?: {};
        toUTCString?: {};
        toISOString?: {};
    };
    updated_at?: {
        [Symbol.toPrimitive]?: {};
        toString?: {};
        valueOf?: {};
        toLocaleString?: {};
        toJSON?: {};
        toDateString?: {};
        toTimeString?: {};
        toLocaleDateString?: {};
        toLocaleTimeString?: {};
        getTime?: {};
        getFullYear?: {};
        getUTCFullYear?: {};
        getMonth?: {};
        getUTCMonth?: {};
        getDate?: {};
        getUTCDate?: {};
        getDay?: {};
        getUTCDay?: {};
        getHours?: {};
        getUTCHours?: {};
        getMinutes?: {};
        getUTCMinutes?: {};
        getSeconds?: {};
        getUTCSeconds?: {};
        getMilliseconds?: {};
        getUTCMilliseconds?: {};
        getTimezoneOffset?: {};
        setTime?: {};
        setMilliseconds?: {};
        setUTCMilliseconds?: {};
        setSeconds?: {};
        setUTCSeconds?: {};
        setMinutes?: {};
        setUTCMinutes?: {};
        setHours?: {};
        setUTCHours?: {};
        setDate?: {};
        setUTCDate?: {};
        setMonth?: {};
        setUTCMonth?: {};
        setFullYear?: {};
        setUTCFullYear?: {};
        toUTCString?: {};
        toISOString?: {};
    };
    user_id?: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: {};
        generate?: any;
        createFromTime?: any;
        createFromHexString?: any;
        createFromBase64?: any;
        isValid?: any;
    };
} & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}, mongoose.Schema<any, mongoose.Model<any, any, any, any, any, any>, {}, {}, {}, {}, mongoose.DefaultSchemaOptions, {
    content: string;
    title: string;
    created_at: NativeDate;
    updated_at: NativeDate;
    user_id: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: unknown;
        generate?: {};
        createFromTime?: {};
        createFromHexString?: {};
        createFromBase64?: {};
        isValid?: {};
    };
    comments: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: unknown;
        generate?: {};
        createFromTime?: {};
        createFromHexString?: {};
        createFromBase64?: {};
        isValid?: {};
    }[];
}, mongoose.Document<unknown, {}, mongoose.FlatRecord<{
    content: string;
    title: string;
    created_at: NativeDate;
    updated_at: NativeDate;
    user_id: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: unknown;
        generate?: {};
        createFromTime?: {};
        createFromHexString?: {};
        createFromBase64?: {};
        isValid?: {};
    };
    comments: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: unknown;
        generate?: {};
        createFromTime?: {};
        createFromHexString?: {};
        createFromBase64?: {};
        isValid?: {};
    }[];
}>> & mongoose.FlatRecord<{
    content: string;
    title: string;
    created_at: NativeDate;
    updated_at: NativeDate;
    user_id: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: unknown;
        generate?: {};
        createFromTime?: {};
        createFromHexString?: {};
        createFromBase64?: {};
        isValid?: {};
    };
    comments: {
        prototype?: mongoose.Types.ObjectId;
        cacheHexString?: unknown;
        generate?: {};
        createFromTime?: {};
        createFromHexString?: {};
        createFromBase64?: {};
        isValid?: {};
    }[];
}> & {
    _id: mongoose.Types.ObjectId;
} & {
    __v: number;
}>>;
export default _default;
